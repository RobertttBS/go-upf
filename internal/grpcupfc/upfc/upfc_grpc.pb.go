// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.26.1
// source: upfc.proto

package upfc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UPFAppClient is the client API for UPFApp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UPFAppClient interface {
	// Sends a greeting
	SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error)
	SetBuffer(ctx context.Context, in *BufferRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddUplinkPdr(ctx context.Context, in *UplinkPdrRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddUplinkFar(ctx context.Context, in *FarRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddDownlinkPdr(ctx context.Context, in *DownlinkPdrRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddDownlinkFar(ctx context.Context, in *FarRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddQer(ctx context.Context, in *QerRequest, opts ...grpc.CallOption) (*RpcReply, error)
	AddSDFTemplate(ctx context.Context, in *SDFTemplateRequest, opts ...grpc.CallOption) (*RpcReply, error)
}

type uPFAppClient struct {
	cc grpc.ClientConnInterface
}

func NewUPFAppClient(cc grpc.ClientConnInterface) UPFAppClient {
	return &uPFAppClient{cc}
}

func (c *uPFAppClient) SayHello(ctx context.Context, in *HelloRequest, opts ...grpc.CallOption) (*HelloReply, error) {
	out := new(HelloReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/SayHello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) SetBuffer(ctx context.Context, in *BufferRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/SetBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddUplinkPdr(ctx context.Context, in *UplinkPdrRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddUplinkPdr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddUplinkFar(ctx context.Context, in *FarRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddUplinkFar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddDownlinkPdr(ctx context.Context, in *DownlinkPdrRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddDownlinkPdr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddDownlinkFar(ctx context.Context, in *FarRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddDownlinkFar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddRoute(ctx context.Context, in *RouteRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddQer(ctx context.Context, in *QerRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddQer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *uPFAppClient) AddSDFTemplate(ctx context.Context, in *SDFTemplateRequest, opts ...grpc.CallOption) (*RpcReply, error) {
	out := new(RpcReply)
	err := c.cc.Invoke(ctx, "/upfc.UPFApp/AddSDFTemplate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UPFAppServer is the server API for UPFApp service.
// All implementations must embed UnimplementedUPFAppServer
// for forward compatibility
type UPFAppServer interface {
	// Sends a greeting
	SayHello(context.Context, *HelloRequest) (*HelloReply, error)
	SetBuffer(context.Context, *BufferRequest) (*RpcReply, error)
	AddUplinkPdr(context.Context, *UplinkPdrRequest) (*RpcReply, error)
	AddUplinkFar(context.Context, *FarRequest) (*RpcReply, error)
	AddDownlinkPdr(context.Context, *DownlinkPdrRequest) (*RpcReply, error)
	AddDownlinkFar(context.Context, *FarRequest) (*RpcReply, error)
	AddRoute(context.Context, *RouteRequest) (*RpcReply, error)
	AddQer(context.Context, *QerRequest) (*RpcReply, error)
	AddSDFTemplate(context.Context, *SDFTemplateRequest) (*RpcReply, error)
	mustEmbedUnimplementedUPFAppServer()
}

// UnimplementedUPFAppServer must be embedded to have forward compatible implementations.
type UnimplementedUPFAppServer struct {
}

func (UnimplementedUPFAppServer) SayHello(context.Context, *HelloRequest) (*HelloReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedUPFAppServer) SetBuffer(context.Context, *BufferRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetBuffer not implemented")
}
func (UnimplementedUPFAppServer) AddUplinkPdr(context.Context, *UplinkPdrRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUplinkPdr not implemented")
}
func (UnimplementedUPFAppServer) AddUplinkFar(context.Context, *FarRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUplinkFar not implemented")
}
func (UnimplementedUPFAppServer) AddDownlinkPdr(context.Context, *DownlinkPdrRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDownlinkPdr not implemented")
}
func (UnimplementedUPFAppServer) AddDownlinkFar(context.Context, *FarRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDownlinkFar not implemented")
}
func (UnimplementedUPFAppServer) AddRoute(context.Context, *RouteRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedUPFAppServer) AddQer(context.Context, *QerRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQer not implemented")
}
func (UnimplementedUPFAppServer) AddSDFTemplate(context.Context, *SDFTemplateRequest) (*RpcReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSDFTemplate not implemented")
}
func (UnimplementedUPFAppServer) mustEmbedUnimplementedUPFAppServer() {}

// UnsafeUPFAppServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UPFAppServer will
// result in compilation errors.
type UnsafeUPFAppServer interface {
	mustEmbedUnimplementedUPFAppServer()
}

func RegisterUPFAppServer(s grpc.ServiceRegistrar, srv UPFAppServer) {
	s.RegisterService(&UPFApp_ServiceDesc, srv)
}

func _UPFApp_SayHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HelloRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).SayHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/SayHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).SayHello(ctx, req.(*HelloRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_SetBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).SetBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/SetBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).SetBuffer(ctx, req.(*BufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddUplinkPdr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UplinkPdrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddUplinkPdr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddUplinkPdr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddUplinkPdr(ctx, req.(*UplinkPdrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddUplinkFar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddUplinkFar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddUplinkFar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddUplinkFar(ctx, req.(*FarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddDownlinkPdr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownlinkPdrRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddDownlinkPdr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddDownlinkPdr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddDownlinkPdr(ctx, req.(*DownlinkPdrRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddDownlinkFar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddDownlinkFar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddDownlinkFar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddDownlinkFar(ctx, req.(*FarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RouteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddRoute(ctx, req.(*RouteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddQer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddQer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddQer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddQer(ctx, req.(*QerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UPFApp_AddSDFTemplate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SDFTemplateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UPFAppServer).AddSDFTemplate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/upfc.UPFApp/AddSDFTemplate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UPFAppServer).AddSDFTemplate(ctx, req.(*SDFTemplateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UPFApp_ServiceDesc is the grpc.ServiceDesc for UPFApp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UPFApp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "upfc.UPFApp",
	HandlerType: (*UPFAppServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SayHello",
			Handler:    _UPFApp_SayHello_Handler,
		},
		{
			MethodName: "SetBuffer",
			Handler:    _UPFApp_SetBuffer_Handler,
		},
		{
			MethodName: "AddUplinkPdr",
			Handler:    _UPFApp_AddUplinkPdr_Handler,
		},
		{
			MethodName: "AddUplinkFar",
			Handler:    _UPFApp_AddUplinkFar_Handler,
		},
		{
			MethodName: "AddDownlinkPdr",
			Handler:    _UPFApp_AddDownlinkPdr_Handler,
		},
		{
			MethodName: "AddDownlinkFar",
			Handler:    _UPFApp_AddDownlinkFar_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _UPFApp_AddRoute_Handler,
		},
		{
			MethodName: "AddQer",
			Handler:    _UPFApp_AddQer_Handler,
		},
		{
			MethodName: "AddSDFTemplate",
			Handler:    _UPFApp_AddSDFTemplate_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "upfc.proto",
}
