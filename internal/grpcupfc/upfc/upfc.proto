// Copyright 2015 The gRPC Authors
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";

option go_package = "/upfc";
option java_multiple_files = true;
option java_package = "org.onosproject.bessupf.grpcClient";
option java_outer_classname = "UPFAppProto";
option objc_class_prefix = "HLW";

package upfc;

// The greeting service definition.
service UPFApp {
  // Sends a greeting
  rpc SayHello (HelloRequest) returns (HelloReply) {}
  rpc SetBuffer (BufferRequest) returns (RpcReply) {}
  rpc AddUplinkPdr (UplinkPdrRequest) returns (RpcReply) {}
  rpc AddUplinkFar (FarRequest) returns (RpcReply) {}
  rpc AddDownlinkPdr (DownlinkPdrRequest) returns (RpcReply) {}
  rpc AddDownlinkFar (FarRequest) returns (RpcReply) {}
  rpc AddRoute (RouteRequest) returns (RpcReply) {}
  rpc AddQer (QerRequest) returns (RpcReply) {}
  rpc AddSDFTemplate (SDFTemplateRequest) returns (RpcReply) {}
}

// The request message containing the user's name.
message HelloRequest {
  string name = 1;
}

// The response message containing the greetings
message HelloReply {
  string message = 1;
}

message RpcReply {
  string message = 1;
}

message BufferRequest {
  bool action = 1; // 0 -> add, 1 -> release
  uint32 far_id = 2;
}

message UplinkPdrRequest {
  uint32 teid = 1;
  uint32 ue_ip = 2;
  uint32 pdr_id = 3;
  uint32 far_id = 4;
  uint32 qer_id = 5;
}

message DownlinkPdrRequest {
  uint64 seid = 1;
  uint32 ue_ip = 2;
  uint32 pdr_id = 3;
  uint32 far_id = 4;
  uint32 qer_id = 5;
}

message FarRequest {
  uint32 teid = 1;
  uint32 action = 2;
  uint32 far_id = 3;
  uint32 tunnel_src_addr = 4;
  uint32 tunnel_dst_addr = 5;
}

message RouteRequest {
  bool is_uplink = 1;
  bytes src_mac = 2;
  bytes dst_mac = 3;
}

message QerRequest {
  uint32 qer_id = 1;
  uint32 qfi = 2;
  uint64 cir = 3;
  uint64 cbs = 4;
  uint64 pir = 5;
  uint64 pbs = 6;
}

message SDFTemplateRequest {
  uint32 src_ip = 1;
  uint32 dst_ip = 2;
  uint32 src_port = 3;
  uint32 dst_port = 4;
  uint32 proto = 5;
  uint32 qer_id = 6;
}